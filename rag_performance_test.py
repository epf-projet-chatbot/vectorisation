""" Calcul du PCC pour √©valuer la performance du RAG sur une BDD de test """
import os
import sys
from groq import Groq
from rag import k_context_vectors, make_vector, k_context_vectors_smart
from mongo import init_connection

# V√©rifier l'argument --test au d√©marrage
if "--test" in sys.argv:
    os.environ["TEST_MODE"] = "true"
    print("üß™ Mode TEST activ√© via argument --test")
elif "--prod" in sys.argv or "--production" in sys.argv:
    os.environ["TEST_MODE"] = "false"
    print("üè≠ Mode PRODUCTION activ√© via argument --prod/--production")

samples = [
    ("Peut-on avoir un JEH √† 70‚Ç¨ ?", "non"),
    ("Puis-je faire un avenant par mail ?", "oui"),
    ("Quel est le smic actuel ?", "11,88 ‚Ç¨"),
    ("Peut-on √™tre appel√©s consultants ?", "non"),
    ("Est-il possible de continuer un bon de commande apr√®s la fin de validit√© de la convention cadre ?", "non"),
    ("L'intervenant peut-il communiquer directement avec le client ?", "non"),
    ("A-t-on droit aux apporteurs d'affaires ?", "non"),
    ("Quelle est la dur√©e de la garantie pour un PDF ?", "2 semaines"),
    ("Peut-on pr√©senter directement au client une CE ?", "oui"),
    ("Quelle est la dur√©e de la garantie pour un document qui n'est pas un PDF ?", "3 mois"),
    ("Peut-on avoir une cotisation sous forme de droit d'entr√©e ?", "oui"),
    ("Peut-on utiliser une seul JEH pour payer 2 intervenants ?", "non"),
    ("L'intervenant doit-il √™tre √©tudiant jusqu'√† la fin de l'√©tude ?", "oui"),
    ("Combien faut-il de personnes pour cr√©er une association de la loi 1901 au minimum ?", "2"),
    ("Peut-on faire un avenant au bon de commande ?", "non"),
]

def rag_generate_response(question):
    """
    G√©n√©ration d'une r√©ponse par le RAG.
    
    Args:
        question: La question √† laquelle le RAG doit r√©pondre.
        
    Returns:
        Une r√©ponse bas√©e sur la question.
    """
    init_connection()
    test_database_connection()
    
    # R√©cup√©rer le contexte pertinent
    context = k_context_vectors(make_vector(question), k=8)
    
    # Construire le prompt avec le contexte
    context_text = "\n".join(context) if context else "Aucun contexte trouv√©."
    prompt = f"Tu es un assistant juridique sp√©cialis√© dans les Junior-Entreprises (JE) fran√ßaises. Tu dois r√©pondre aux questions des utilisateurs en t‚Äôappuyant exclusivement sur les documents fournis via le syst√®me de retrieval (lois, statuts, guides CNJE, jurisprudences, etc.). Lorsque tu r√©ponds : Ne fournis des informations que si elles sont pr√©sentes dans les documents r√©cup√©r√©s. Si une information ne figure pas dans les documents, indique clairement que tu ne peux pas r√©pondre avec certitude, et invite l‚Äôutilisateur √† consulter un expert juridique ou la CNJE. Sois concis, rigoureux et neutre dans le ton. Si une r√©ponse comporte plusieurs cas possibles (ex. : selon le statut associatif ou non), √©num√®re-les clairement. Contexte: {context_text}\n\nQuestion: {question}\n\nR√©ponse:"
    
    client = Groq(api_key=os.environ.get("API_KEY"),)
    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "system",
                "content": ""            },
            {
                "role": "user", 
                "content": prompt,
            }
        ],
        model="llama-3.3-70b-versatile",  # Mod√®les disponibles:
        # - "llama-3.3-70b-versatile"     (ACTUEL - Recommand√©)
        # - "llama-3.1-70b-versatile"     (Plus ancien mais stable)
        # - "llama-3.1-8b-instant"        (Plus rapide, moins pr√©cis)
        # - "mixtral-8x7b-32768"          (Alternative Mixtral)
        # - "gemma2-9b-it"                (Mod√®le Google Gemma)
    )
    reponse = chat_completion.choices[0].message.content
    return reponse

def rag_generate_response_smart(question):
    """
    Version am√©lior√©e avec utilisation des m√©tadonn√©es et prompt optimis√©
    """
    init_connection()
    test_database_connection()
    
    # D√©tecter le type de question AVANT de l'utiliser
    is_quantitative = any(word in question.lower() for word in [
        "combien", "nombre", "quel est le", "quelle est la", "montant", "prix", "co√ªt", 
        "dur√©e", "pourcentage", "%", "‚Ç¨", "euros", "jours", "mois", "ann√©es"
    ])
    
    # Utiliser la version smart avec adaptation selon le type de question
    if is_quantitative:
        # Pour les questions chiffr√©es, privil√©gier les m√©tadonn√©es
        context = k_context_vectors_smart(make_vector(question), k=6, prioritize_metadata=True)
    else:
        # Pour les questions qualitatives, plus de contexte et moins de restrictions
        context = k_context_vectors(make_vector(question), k=8)
    
    # Prompt adaptatif selon le type de question
    context_text = "\n\n---CHUNK---\n\n".join(context) if context else "Aucun contexte trouv√©."
    
    if is_quantitative:
        # Prompt strict pour les questions quantitatives avec gestion d'ambigu√Øt√©
        prompt = f"""Tu es un assistant juridique expert en Junior-Entreprises fran√ßaises.

MISSION: R√©pondre avec une pr√©cision maximale aux questions CHIFFR√âES.

R√àGLES STRICTES:
1. Cherche les associations explicites avec ":" 
2. Si tu vois plusieurs chiffres dans le contexte, analyse leur CONTEXTE pour d√©terminer lequel correspond √† la question
3. Pour "nombre de litiges" cherche un petit nombre (< 100), pour "pr√©judice/montant" cherche un nombre avec ‚Ç¨ ou plus grand
4. Si l'info chiffr√©e est ambigu√´ ou contradictoire, explique l'ambigu√Øt√© au lieu de deviner
5. Cite EXACTEMENT les chiffres trouv√©s avec leur contexte

ANALYSE DU CONTEXTE:
{context_text}

QUESTION: {question}

R√âPONSE CHIFFR√âE PR√âCISE:"""
    else:
        # Prompt flexible pour les questions qualitatives
        prompt = f"""Tu es un assistant juridique expert en Junior-Entreprises fran√ßaises.

MISSION: R√©pondre de mani√®re compl√®te et utile aux questions sur les Junior-Entreprises.

INSTRUCTIONS:
1. Utilise les informations du contexte fourni
2. Si le contexte est incomplet, utilise tes connaissances g√©n√©rales sur les Junior-Entreprises
3. Donne des conseils pratiques et utiles
4. Sois pr√©cis quand tu as des informations exactes
5. Reste dans le domaine des Junior-Entreprises fran√ßaises

CONTEXTE DISPONIBLE:
{context_text}

QUESTION: {question}

R√âPONSE COMPL√àTE ET UTILE:"""

    client = Groq(api_key=os.environ.get("API_KEY"),)
    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "system",
                "content": "Tu es un assistant qui r√©pond avec une pr√©cision factuelle absolue."
            },
            {
                "role": "user", 
                "content": prompt,
            }
        ],
        model="llama-3.3-70b-versatile",
        temperature=0.1,  # R√©duire la cr√©ativit√© pour plus de pr√©cision
    )
    return chat_completion.choices[0].message.content

def calculate_pcc(samples):
    """
    Calcule le pourcentage de r√©ponses correctes (PCC) pour un ensemble d'√©chantillons.
    
    Args:
        samples: Liste de tuples (question, r√©ponse attendue).
        
    Returns:
        Le pourcentage de r√©ponses correctes.
    """
    correct_count = 0
    
    for question, expected_answer in samples:
        # Simuler la g√©n√©ration de la r√©ponse par le RAG
        response = rag_generate_response(question)
        
        if response in expected_answer:
            correct_count += 1
    
    pcc = (correct_count / len(samples)) * 100
    return pcc

def test_individual_question(question):
    """
    Teste une question individuelle et affiche le processus d√©taill√©.
    
    Args:
        question: La question √† tester.
    """
    print(f"\n{'='*60}")
    print(f"QUESTION: {question}")
    print(f"{'='*60}")
    
    try:
        # √âtape 1: Vectorisation de la question
        print("\n1. Vectorisation de la question...")
        vector = make_vector(question)
        print(f"   ‚úì Vecteur g√©n√©r√© (dimension: {len(vector)})")
        
        # √âtape 2: Recherche de contexte
        print("\n2. Recherche de contexte pertinent...")
        context = k_context_vectors(vector, k=5)
        print(f"   ‚úì {len(context)} chunks de contexte trouv√©s")
        
        # Afficher le contexte trouv√©
        print("\n3. Contexte r√©cup√©r√©:")
        for i, chunk in enumerate(context, 1):
            preview = chunk[:100] + "..." if len(chunk) > 100 else chunk
            print(f"   Chunk {i}: {preview}")
        
        # √âtape 3: G√©n√©ration de la r√©ponse
        print("\n4. G√©n√©ration de la r√©ponse...")
        response = rag_generate_response(question)
        print(f"\n‚úÖ R√âPONSE (Version classique): {response}")
        
        # Test √©galement la version am√©lior√©e
        print("\n5. Test de la version am√©lior√©e...")
        response_smart = rag_generate_response_smart(question)
        print(f"\nüöÄ R√âPONSE (Version am√©lior√©e): {response_smart}")
        
        return response_smart  # Retourner la version am√©lior√©e
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}")
        return None

def test_database_connection():
    """
    Teste la connexion √† la base de donn√©es MongoDB.
    """
    print("\nüìä Test de connexion √† la base de donn√©es...")
    try:
        from mongo import test_connection, count_documents, get_collection_stats
        
        if test_connection():
            print("   ‚úÖ Connexion MongoDB r√©ussie")
            doc_count = count_documents()
            print(f"   üìÑ Nombre de documents: {doc_count}")
            
            stats = get_collection_stats()
            print(f"   üìà Statistiques: {stats}")
            return True
        else:
            print("   ‚ùå √âchec de connexion MongoDB")
            return False
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion: {e}")
        return False

def run_performance_test():
    """
    Lance le test de performance complet avec √©valuation manuelle des r√©ponses.
    """
    print("\nüß™ LANCEMENT DU TEST DE PERFORMANCE COMPLET")
    print("="*60)
    print("üí° Vous allez √©valuer manuellement chaque r√©ponse du syst√®me RAG")
    print("   Tapez 'o' ou 'oui' si la r√©ponse est correcte")
    print("   Tapez 'n' ou 'non' si la r√©ponse est incorrecte")
    print("   Tapez 's' pour passer une question")
    print("="*60)
    
    correct_count = 0
    total_questions = len(samples)
    skipped_questions = 0
    
    for i, (question, expected_answer) in enumerate(samples, 1):
        print(f"\n{'='*60}")
        print(f"[{i}/{total_questions}] QUESTION: {question}")
        print(f"R√âPONSE ATTENDUE: {expected_answer}")
        print(f"{'='*60}")
        
        try:
            # G√©n√©rer la r√©ponse du RAG
            print("\nü§ñ G√©n√©ration de la r√©ponse par le RAG...")
            response = rag_generate_response(question)
            
            print(f"\nüìù R√âPONSE DU RAG:")
            print("-" * 40)
            print(f"{response}")
            print("-" * 40)
            
            # Demander l'√©valuation √† l'utilisateur
            while True:
                user_evaluation = input(f"\n‚ùì Cette r√©ponse est-elle correcte? (o/oui/n/non/s/skip): ").strip().lower()
                
                if user_evaluation in ['o', 'oui', 'y', 'yes']:
                    correct_count += 1
                    print("   ‚úÖ Marqu√© comme CORRECT")
                    break
                elif user_evaluation in ['n', 'non', 'no']:
                    print("   ‚ùå Marqu√© comme INCORRECT")
                    break
                elif user_evaluation in ['s', 'skip', 'passer']:
                    skipped_questions += 1
                    print("   ‚è≠Ô∏è  Question pass√©e")
                    break
                else:
                    print("   ‚ö†Ô∏è  R√©ponse invalide. Utilisez 'o/oui', 'n/non', ou 's/skip'")
                
        except Exception as e:
            print(f"   ‚ùå ERREUR lors de la g√©n√©ration: {e}")
            skip = input("   Voulez-vous passer cette question? (o/n): ").strip().lower()
            if skip in ['o', 'oui', 'y', 'yes']:
                skipped_questions += 1
    
    # Calcul des r√©sultats
    evaluated_questions = total_questions - skipped_questions
    pcc = (correct_count / evaluated_questions * 100) if evaluated_questions > 0 else 0
    
    print(f"\n{'='*60}")
    print(f"üìä R√âSULTATS FINAUX:")
    print(f"   ‚Ä¢ Questions totales: {total_questions}")
    print(f"   ‚Ä¢ Questions √©valu√©es: {evaluated_questions}")
    print(f"   ‚Ä¢ Questions pass√©es: {skipped_questions}")
    print(f"   ‚Ä¢ R√©ponses correctes: {correct_count}")
    print(f"   ‚Ä¢ Pourcentage de r√©ussite (PCC): {pcc:.1f}%")
    print(f"{'='*60}")
    
    return pcc

def run_automatic_performance_test():
    """
    Lance le test de performance automatique (sans √©valuation manuelle).
    """
    print("\n‚ö° LANCEMENT DU TEST DE PERFORMANCE AUTOMATIQUE")
    print("="*60)
    
    correct_count = 0
    total_questions = len(samples)
    
    for i, (question, expected_answer) in enumerate(samples, 1):
        print(f"\n[{i}/{total_questions}] Test: {question[:50]}...")
        
        try:
            response = rag_generate_response(question)
            
            # V√©rification automatique simplifi√©e
            is_correct = expected_answer.lower() in response.lower()
            
            if is_correct:
                correct_count += 1
                print(f"   ‚úÖ CORRECT (attendu: {expected_answer})")
            else:
                print(f"   ‚ùå INCORRECT (attendu: {expected_answer}, obtenu: {response[:50]}...)")
                
        except Exception as e:
            print(f"   ‚ùå ERREUR: {e}")
    
    pcc = (correct_count / total_questions) * 100
    print(f"\n{'='*60}")
    print(f"üìä R√âSULTATS FINAUX (AUTOMATIQUE):")
    print(f"   ‚Ä¢ Questions correctes: {correct_count}/{total_questions}")
    print(f"   ‚Ä¢ Pourcentage de r√©ussite (PCC): {pcc:.1f}%")
    print(f"   ‚ö†Ô∏è  Note: Ce test utilise une v√©rification automatique simple")
    print(f"{'='*60}")
    
    return pcc

def interactive_mode():
    """
    Mode interactif permettant de poser des questions en temps r√©el.
    """
    print("\nüí¨ MODE INTERACTIF")
    print("="*40)
    print("Tapez vos questions (tapez 'quit' pour quitter)")
    
    while True:
        try:
            question = input("\n‚ùì Votre question: ").strip()
            
            if question.lower() in ['quit', 'exit', 'q']:
                print("üëã Au revoir!")
                break
                
            if not question:
                continue
                
            response = test_individual_question(question)
            
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

def show_menu():
    """
    Affiche le menu principal de l'interface.
    """
    from config import config
    mode_info = "üß™ TEST" if config.test_mode else "üè≠ PRODUCTION"
    db_name = config.get_database_name()
    
    # V√©rifier si le mode a √©t√© d√©fini par argument
    mode_source = ""
    if "--test" in sys.argv:
        mode_source = " (via --test)"
    elif "--prod" in sys.argv or "--production" in sys.argv:
        mode_source = " (via --prod)"
    
    print("\n" + "="*60)
    print("ü§ñ INTERFACE DE TEST RAG - CHATBOT JURIDIQUE")
    print(f"üìä Mode actuel: {mode_info}{mode_source} (Base: {db_name})")
    print("="*60)
    print("1. Tester la connexion √† la base de donn√©es")
    print("2. Tester une question sp√©cifique")
    print("3. Test de performance avec √©valuation manuelle")
    print("4. Test de performance automatique (rapide)")
    print("5. Mode interactif (questions libres)")
    print("6. Afficher les √©chantillons de test")
    print("7. Basculer entre mode TEST/PRODUCTION")
    print("8. Quitter")
    print("="*60)

def show_samples():
    """
    Affiche tous les √©chantillons de test disponibles.
    """
    print("\nüìã √âCHANTILLONS DE TEST DISPONIBLES:")
    print("="*50)
    
    for i, (question, answer) in enumerate(samples, 1):
        print(f"{i:2d}. Q: {question}")
        print(f"     R: {answer}")
        print("-" * 50)

def toggle_test_mode():
    """
    Bascule entre le mode test et le mode production
    """
    from config import config
    import os
    
    current_mode = "TEST" if config.test_mode else "PRODUCTION"
    new_mode = "PRODUCTION" if config.test_mode else "TEST"
    
    print(f"\nüîÑ BASCULEMENT DE MODE")
    print("=" * 40)
    print(f"Mode actuel: {current_mode}")
    print(f"Nouveau mode: {new_mode}")
    
    if config.test_mode:
        print(f"üìä Base actuelle: {config.get_database_name()}")
        print(f"üìä Nouvelle base: {config.database_name}")
    else:
        print(f"üìä Base actuelle: {config.get_database_name()}")
        print(f"üìä Nouvelle base: {config.test_database_name}")
    
    confirm = input(f"\n‚ùì Voulez-vous passer en mode {new_mode}? (o/n): ").strip().lower()
    
    if confirm in ['o', 'oui', 'y', 'yes']:
        # Modifier la variable d'environnement
        new_test_mode = "false" if config.test_mode else "true"
        
        # Lire le fichier .env
        env_path = '.env'
        if os.path.exists(env_path):
            with open(env_path, 'r') as f:
                lines = f.readlines()
            
            # Modifier la ligne TEST_MODE
            for i, line in enumerate(lines):
                if line.startswith('TEST_MODE='):
                    lines[i] = f'TEST_MODE={new_test_mode}\n'
                    break
            else:
                # Ajouter la ligne si elle n'existe pas
                lines.append(f'TEST_MODE={new_test_mode}\n')
            
            # √âcrire le fichier modifi√©
            with open(env_path, 'w') as f:
                f.writelines(lines)
            
            print(f"‚úÖ Mode {new_mode} activ√©!")
            print("‚ö†Ô∏è  Red√©marrez le programme pour que les changements prennent effet")
        else:
            print("‚ùå Fichier .env non trouv√©")
    else:
        print("‚ùå Changement annul√©")

def main():
    """
    Fonction principale de l'interface.
    """
    while True:
        try:
            show_menu()
            choice = input("\nüî• Votre choix (1-8): ").strip()
            
            if choice == '1':
                test_database_connection()
                
            elif choice == '2':
                print("\nüìù Test d'une question sp√©cifique")
                question = input("‚ùì Entrez votre question: ").strip()
                if question:
                    test_individual_question(question)
                    
            elif choice == '3':
                run_performance_test()
                
            elif choice == '4':
                run_automatic_performance_test()
                
            elif choice == '5':
                interactive_mode()
                
            elif choice == '6':
                show_samples()
                
            elif choice == '7':
                toggle_test_mode()
                
            elif choice == '8':
                print("\nüëã Au revoir!")
                break
                
            else:
                print("\n‚ùå Choix invalide. Veuillez entrer un nombre entre 1 et 8.")
                
            input("\n‚è∏Ô∏è  Appuyez sur Entr√©e pour continuer...")
            
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            break
        except Exception as e:
            print(f"\n‚ùå Erreur inattendue: {e}")
            input("\n‚è∏Ô∏è  Appuyez sur Entr√©e pour continuer...")

if __name__ == "__main__":
    main()