""" Calcul du PCC pour √©valuer la performance du RAG sur une BDD de test """
import os
from groq import Groq
from rag import k_context_vectors, make_vector
from mongo import init_connection

samples = [
    ("Peut-on avoir un JEH √† 70‚Ç¨ ?", "non"),
    ("Peut-on √™tre appel√©s consultants ?", "non"),
    ("L'intervenant peut-il communiquer directement avec le client ?", "non"),
    ("Quelle est la dur√©e de la garantie pour un PDF ?", "2 semaines"),
    ("Quelle est la dur√©e de la garantie pour un document qui n'est pas un PDF ?", "3 mois"),
    ("Peut-on avoir une cotisation sous forme de droit d'entr√©e ?", "oui"),
    ("Peut-on utiliser une seul JEH pour payer 2 intervenants ?", "non"),
    ("Puis-je faire un avenant par mail ?", "oui"),
    ("L'intervenant doit-il √™tre √©tudiant jusqu'√† la fin de l'√©tude ?", "oui"),
    ("Combien faut-il de personnes pour cr√©er une association de la loi 1901 au minimum ?", "2"),
    ("A-t-on droit aux apporteurs d'affaires ?", "non"),
    ("Peut-on pr√©senter directement au client une CE ?", "oui"),
    ("Quel est le smic actuel ?", "11,88 ‚Ç¨"),
    ("Est-il possible de continuer un bon de commande apr√®s la fin de validit√© de la convention cadre ?", "non"),
    ("Peut-on faire un avenant au bon de commande ?", "non"),
]

def rag_generate_response(question):
    """
    G√©n√©ration d'une r√©ponse par le RAG.
    
    Args:
        question: La question √† laquelle le RAG doit r√©pondre.
        
    Returns:
        Une r√©ponse bas√©e sur la question.
    """
    init_connection()
    
    # R√©cup√©rer le contexte pertinent
    context = k_context_vectors(make_vector(question), k=5)
    
    # Construire le prompt avec le contexte
    context_text = "\n".join(context) if context else "Aucun contexte trouv√©."
    prompt = f"Contexte: {context_text}\n\nQuestion: {question}\n\nR√©ponse:"
    
    client = Groq(api_key=os.environ.get("API_KEY"),)
    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "system",
                "content": "Tu es un assistant juridique. R√©ponds pr√©cis√©ment aux questions en te basant sur le contexte fourni."
            },
            {
                "role": "user", 
                "content": prompt,
            }
        ],
        model="llama-3.3-70b-versatile",
    )
    reponse = chat_completion.choices[0].message.content
    return reponse

def calculate_pcc(samples):
    """
    Calcule le pourcentage de r√©ponses correctes (PCC) pour un ensemble d'√©chantillons.
    
    Args:
        samples: Liste de tuples (question, r√©ponse attendue).
        
    Returns:
        Le pourcentage de r√©ponses correctes.
    """
    correct_count = 0
    
    for question, expected_answer in samples:
        # Simuler la g√©n√©ration de la r√©ponse par le RAG
        response = rag_generate_response(question)
        
        if response in expected_answer:
            correct_count += 1
    
    pcc = (correct_count / len(samples)) * 100
    return pcc

def test_individual_question(question):
    """
    Teste une question individuelle et affiche le processus d√©taill√©.
    
    Args:
        question: La question √† tester.
    """
    print(f"\n{'='*60}")
    print(f"QUESTION: {question}")
    print(f"{'='*60}")
    
    try:
        # √âtape 1: Vectorisation de la question
        print("\n1. Vectorisation de la question...")
        vector = make_vector(question)
        print(f"   ‚úì Vecteur g√©n√©r√© (dimension: {len(vector)})")
        
        # √âtape 2: Recherche de contexte
        print("\n2. Recherche de contexte pertinent...")
        context = k_context_vectors(vector, k=5)
        print(f"   ‚úì {len(context)} chunks de contexte trouv√©s")
        
        # Afficher le contexte trouv√©
        print("\n3. Contexte r√©cup√©r√©:")
        for i, chunk in enumerate(context, 1):
            preview = chunk[:100] + "..." if len(chunk) > 100 else chunk
            print(f"   Chunk {i}: {preview}")
        
        # √âtape 3: G√©n√©ration de la r√©ponse
        print("\n4. G√©n√©ration de la r√©ponse...")
        response = rag_generate_response(question)
        print(f"\n‚úÖ R√âPONSE: {response}")
        
        return response
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}")
        return None

def test_database_connection():
    """
    Teste la connexion √† la base de donn√©es MongoDB.
    """
    print("\nüìä Test de connexion √† la base de donn√©es...")
    try:
        from mongo import test_connection, count_documents, get_collection_stats
        
        if test_connection():
            print("   ‚úÖ Connexion MongoDB r√©ussie")
            doc_count = count_documents()
            print(f"   üìÑ Nombre de documents: {doc_count}")
            
            stats = get_collection_stats()
            print(f"   üìà Statistiques: {stats}")
            return True
        else:
            print("   ‚ùå √âchec de connexion MongoDB")
            return False
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion: {e}")
        return False

def run_performance_test():
    """
    Lance le test de performance complet sur tous les √©chantillons.
    """
    print("\nüß™ LANCEMENT DU TEST DE PERFORMANCE COMPLET")
    print("="*60)
    
    correct_count = 0
    total_questions = len(samples)
    
    for i, (question, expected_answer) in enumerate(samples, 1):
        print(f"\n[{i}/{total_questions}] Test: {question[:50]}...")
        
        try:
            response = rag_generate_response(question)
            
            # V√©rification simplifi√©e de la r√©ponse
            is_correct = expected_answer.lower() in response.lower()
            
            if is_correct:
                correct_count += 1
                print(f"   ‚úÖ CORRECT (attendu: {expected_answer})")
            else:
                print(f"   ‚ùå INCORRECT (attendu: {expected_answer}, obtenu: {response[:50]}...)")
                
        except Exception as e:
            print(f"   ‚ùå ERREUR: {e}")
    
    pcc = (correct_count / total_questions) * 100
    print(f"\n{'='*60}")
    print(f"üìä R√âSULTATS FINAUX:")
    print(f"   ‚Ä¢ Questions correctes: {correct_count}/{total_questions}")
    print(f"   ‚Ä¢ Pourcentage de r√©ussite (PCC): {pcc:.1f}%")
    print(f"{'='*60}")
    
    return pcc

def interactive_mode():
    """
    Mode interactif permettant de poser des questions en temps r√©el.
    """
    print("\nüí¨ MODE INTERACTIF")
    print("="*40)
    print("Tapez vos questions (tapez 'quit' pour quitter)")
    
    while True:
        try:
            question = input("\n‚ùì Votre question: ").strip()
            
            if question.lower() in ['quit', 'exit', 'q']:
                print("üëã Au revoir!")
                break
                
            if not question:
                continue
                
            response = test_individual_question(question)
            
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")
            break
        except Exception as e:
            print(f"‚ùå Erreur: {e}")

def show_menu():
    """
    Affiche le menu principal de l'interface.
    """
    print("\n" + "="*60)
    print("ü§ñ INTERFACE DE TEST RAG - CHATBOT JURIDIQUE")
    print("="*60)
    print("1. Tester la connexion √† la base de donn√©es")
    print("2. Tester une question sp√©cifique")
    print("3. Lancer le test de performance complet")
    print("4. Mode interactif (questions libres)")
    print("5. Afficher les √©chantillons de test")
    print("6. Quitter")
    print("="*60)

def show_samples():
    """
    Affiche tous les √©chantillons de test disponibles.
    """
    print("\nüìã √âCHANTILLONS DE TEST DISPONIBLES:")
    print("="*50)
    
    for i, (question, answer) in enumerate(samples, 1):
        print(f"{i:2d}. Q: {question}")
        print(f"     R: {answer}")
        print("-" * 50)

def main():
    """
    Fonction principale de l'interface.
    """
    while True:
        try:
            show_menu()
            choice = input("\nüî• Votre choix (1-6): ").strip()
            
            if choice == '1':
                test_database_connection()
                
            elif choice == '2':
                print("\nüìù Test d'une question sp√©cifique")
                question = input("‚ùì Entrez votre question: ").strip()
                if question:
                    test_individual_question(question)
                    
            elif choice == '3':
                run_performance_test()
                
            elif choice == '4':
                interactive_mode()
                
            elif choice == '5':
                show_samples()
                
            elif choice == '6':
                print("\nüëã Au revoir!")
                break
                
            else:
                print("\n‚ùå Choix invalide. Veuillez entrer un nombre entre 1 et 6.")
                
            input("\n‚è∏Ô∏è  Appuyez sur Entr√©e pour continuer...")
            
        except KeyboardInterrupt:
            print("\n\nüëã Au revoir!")
            break
        except Exception as e:
            print(f"\n‚ùå Erreur inattendue: {e}")
            input("\n‚è∏Ô∏è  Appuyez sur Entr√©e pour continuer...")

if __name__ == "__main__":
    main()