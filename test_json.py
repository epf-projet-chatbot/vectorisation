#!/usr/bin/env python3
"""
Script de test pour valider le fonctionnement de la pipeline avec les fichiers JSON
"""

import os
import sys
import json
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent))

from config import config
from loader import process_json_file, load_file
from chunker import split_text_into_chunks
from embedder import get_embedding
from search import SemanticSearch
from mongo import get_collection_stats, test_connection


def test_json_loading():
    """Test du chargement du fichier JSON"""
    print("=" * 60)
    print("üß™ TEST 1: CHARGEMENT DU FICHIER JSON")
    print("=" * 60)
    
    # Activer le mode test
    config.test_mode = True
    
    # Tester le chargement du JSON
    json_data = process_json_file()
    
    print(f"üìÅ R√©pertoire de test: {config.get_data_dir()}")
    print(f"üìÑ Fichier JSON: {config.get_json_filename()}")
    
    if not json_data:
        print("‚ùå √âCHEC: Aucun fichier JSON trouv√© ou charg√©")
        return False
    
    print(f"‚úÖ Fichier JSON charg√© avec succ√®s")
    print(f"üìè Type de contenu: {type(json_data['content'])}")
    
    if isinstance(json_data['content'], list):
        print(f"üìä Nombre d'√©l√©ments: {len(json_data['content'])}")
        
        # Afficher un aper√ßu du premier √©l√©ment
        if len(json_data['content']) > 0:
            first_item = json_data['content'][0]
            print(f"\nüìã Aper√ßu du premier √©l√©ment:")
            for key, value in first_item.items():
                if key == 'content' and isinstance(value, list):
                    print(f"   {key}: liste de {len(value)} √©l√©ments")
                elif isinstance(value, str) and len(value) > 50:
                    print(f"   {key}: {value[:50]}...")
                else:
                    print(f"   {key}: {value}")
    else:
        print(f"üìä Contenu: {str(json_data['content'])[:200]}...")
    
    print(f"\n‚úÖ TEST 1 R√âUSSI: Fichier JSON charg√© et structur√© correctement")
    return True


def test_json_content_extraction():
    """Test de l'extraction du contenu des √©l√©ments JSON"""
    print("\n" + "=" * 60)
    print("üß™ TEST 2: EXTRACTION DU CONTENU JSON")
    print("=" * 60)
    
    # Charger le JSON
    config.test_mode = True
    json_data = process_json_file()
    
    if not json_data:
        print("‚ùå √âCHEC: Aucun fichier JSON disponible pour le test")
        return False
    
    # V√©rifier la structure du contenu
    content = json_data.get('content', [])
    if not isinstance(content, list) or len(content) == 0:
        print("‚ùå √âCHEC: Structure JSON incorrecte ou vide")
        return False
    
    # Tester l'extraction de contenu textuel de diff√©rents √©l√©ments
    total_text_length = 0
    extracted_fields = []
    
    print(f"üìÑ Analyse de {len(content)} objets JSON...")
    
    for i, item in enumerate(content[:3]):  # Analyser les 3 premiers
        print(f"\nüìã Objet {i+1}:")
        
        # Extraire les champs textuels principaux
        text_fields = []
        
        if 'title' in item:
            text_fields.append(f"Titre: {item['title']}")
        if 'description' in item:
            text_fields.append(f"Description: {item['description']}")
        if 'budget' in item:
            text_fields.append(f"Budget: {item['budget']}")
        
        # Traiter les objets imbriqu√©s
        if 'client' in item and isinstance(item['client'], dict):
            client = item['client']
            if 'name' in client:
                text_fields.append(f"Client: {client['name']}")
        
        # Traiter les listes (skills, etc.)
        if 'skills' in item and isinstance(item['skills'], list):
            skills = [skill.get('name', '') for skill in item['skills'] if isinstance(skill, dict)]
            if skills:
                text_fields.append(f"Comp√©tences: {', '.join(skills)}")
        
        # Combiner tout le texte
        combined_text = " | ".join(text_fields)
        text_length = len(combined_text)
        total_text_length += text_length
        
        print(f"   üìè Texte extrait: {text_length} caract√®res")
        print(f"   üìù Aper√ßu: {combined_text[:100]}...")
        
        extracted_fields.extend(text_fields)
    
    print(f"\nüìä R√©sum√© de l'extraction:")
    print(f"   üìè Longueur totale du texte: {total_text_length} caract√®res")
    print(f"   üìÑ Champs extraits: {len(extracted_fields)}")
    
    if total_text_length > 0:
        print(f"\n‚úÖ TEST 2 R√âUSSI: Contenu JSON extrait avec succ√®s")
        return True
    else:
        print(f"\n‚ùå TEST 2 √âCHOU√â: Aucun contenu textuel extrait")
        return False


def test_json_chunking():
    """Test du d√©coupage en chunks du contenu JSON"""
    print("\n" + "=" * 60)
    print("üß™ TEST 3: D√âCOUPAGE EN CHUNKS DU JSON")
    print("=" * 60)
    
    # Charger le JSON et extraire le contenu
    config.test_mode = True
    json_data = process_json_file()
    
    if not json_data:
        print("‚ùå √âCHEC: Aucun fichier JSON disponible pour le test")
        return False
    
    # Simuler l'extraction du contenu comme dans le loader
    full_content = json.dumps(json_data['content'], ensure_ascii=False, indent=2)
    
    print(f"üìÑ Contenu JSON:")
    print(f"   üìè Taille originale: {len(full_content)} caract√®res")
    
    # Cr√©er les chunks
    chunks = split_text_into_chunks(full_content, chunk_size=800, overlap=100)
    
    print(f"‚úÇÔ∏è  R√©sultat du chunking:")
    print(f"   üìë Chunks cr√©√©s: {len(chunks)}")
    print(f"   üìè Param√®tres: chunk_size=800, overlap=100")
    
    # V√©rifier quelques chunks
    for i, chunk in enumerate(chunks[:2]):  # Premiers 2 chunks
        print(f"\nüìë Chunk {i+1}:")
        print(f"   üìè Taille: {len(chunk)} caract√®res")
        print(f"   üìù Aper√ßu: {chunk[:120]}...")
    
    if len(chunks) > 0:
        print(f"\n‚úÖ TEST 3 R√âUSSI: {len(chunks)} chunks cr√©√©s √† partir du JSON")
        return True
    else:
        print(f"\n‚ùå TEST 3 √âCHOU√â: Aucun chunk cr√©√©")
        return False


def test_json_embedding():
    """Test de g√©n√©ration d'embeddings pour le contenu JSON"""
    print("\n" + "=" * 60)
    print("üß™ TEST 4: G√âN√âRATION D'EMBEDDINGS POUR JSON")
    print("=" * 60)
    
    # Texte de test extrait du JSON
    test_text = "D√©veloppement application mobile de conseil juridique. Budget: De 5 000‚Ç¨ √† 15 000‚Ç¨. Client: Cabinet d'Avocats Durand"
    
    print(f"üìù Texte de test: {test_text}")
    
    try:
        # G√©n√©rer l'embedding
        embedding = get_embedding(test_text)
        
        print(f"üß† Embedding g√©n√©r√©:")
        print(f"   üìè Dimensions: {len(embedding)}")
        print(f"   üìä Type: {type(embedding[0]).__name__}")
        print(f"   üìà Premiers 5 valeurs: {embedding[:5]}")
        
        # V√©rifier que l'embedding est valide
        if len(embedding) > 0 and isinstance(embedding[0], float):
            print("\n‚úÖ TEST 4 R√âUSSI: Embedding g√©n√©r√© correctement pour le contenu JSON")
            return True
        else:
            print("\n‚ùå TEST 4 √âCHOU√â: Embedding invalide")
            return False
            
    except Exception as e:
        print(f"\n‚ùå TEST 4 √âCHOU√â: Erreur lors de la g√©n√©ration - {e}")
        return False


def test_json_search():
    """Test de recherche s√©mantique dans le contenu JSON"""
    print("\n" + "=" * 60)
    print("üß™ TEST 5: RECHERCHE S√âMANTIQUE DANS LE JSON")
    print("=" * 60)
    
    try:
        # V√©rifier la connexion DB
        test_connection()
        stats = get_collection_stats()
        
        if stats is None:
            print("‚ùå √âCHEC: Impossible de se connecter √† la base de donn√©es")
            return False
        
        # Initialiser le moteur de recherche
        search_engine = SemanticSearch()
        
        # Requ√™tes de test sp√©cifiques au contenu JSON
        test_queries = [
            "d√©veloppement application mobile",
            "conseil juridique",
            "RGPD conformit√©",
            "contrat commercial",
            "cabinet avocat"
        ]
        
        all_tests_passed = True
        
        for query in test_queries:
            print(f"\nüîç Test recherche: '{query}'")
            
            try:
                results = search_engine.search(query, top_k=2)
                
                if results:
                    print(f"   ‚úÖ {len(results)} r√©sultat(s) trouv√©(s)")
                    
                    # V√©rifier si au moins un r√©sultat vient du JSON
                    json_found = False
                    for result in results:
                        filename = result['document']['filename']
                        if filename.endswith('.json'):
                            json_found = True
                            similarity = result['similarity']
                            print(f"   üìÑ JSON trouv√©: {os.path.basename(filename)} (similarit√©: {similarity:.3f})")
                            break
                    
                    if not json_found:
                        print("   ‚ö†Ô∏è  Aucun r√©sultat JSON trouv√© pour cette requ√™te")
                else:
                    print("   ‚ùå Aucun r√©sultat trouv√©")
                    all_tests_passed = False
                    
            except Exception as e:
                print(f"   ‚ùå Erreur lors de la recherche: {e}")
                all_tests_passed = False
        
        if all_tests_passed:
            print("\n‚úÖ TEST 5 R√âUSSI: Recherche s√©mantique fonctionnelle pour le JSON")
            return True
        else:
            print("\n‚ùå TEST 5 PARTIELLEMENT √âCHOU√â: Certaines recherches ont √©chou√©")
            return False
            
    except Exception as e:
        print(f"\n‚ùå TEST 5 √âCHOU√â: Erreur g√©n√©rale - {e}")
        return False


def run_all_tests():
    """Ex√©cute tous les tests pour les fichiers JSON"""
    print("üöÄ D√âBUT DES TESTS JSON")
    print("=" * 60)
    
    tests = [
        ("Chargement du fichier JSON", test_json_loading),
        ("Extraction du contenu JSON", test_json_content_extraction),
        ("D√©coupage en chunks du JSON", test_json_chunking),
        ("G√©n√©ration d'embeddings pour JSON", test_json_embedding),
        ("Recherche s√©mantique dans le JSON", test_json_search)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"\n‚ùå ERREUR CRITIQUE dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DES TESTS JSON")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ R√âUSSI" if success else "‚ùå √âCHOU√â"
        print(f"{status}: {test_name}")
        if success:
            passed += 1
    
    print(f"\nüìä R√âSULTAT GLOBAL: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ TOUS LES TESTS JSON SONT PASS√âS ! Les fichiers JSON fonctionnent correctement.")
        return True
    else:
        print("‚ö†Ô∏è  CERTAINS TESTS JSON ONT √âCHOU√â. V√©rifiez les erreurs ci-dessus.")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
